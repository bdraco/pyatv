name: Tests

on: [pull_request]

jobs:
  build:
    name: >-
      ${{ matrix.python-version }}
      /
      ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 8
      matrix:
        # https://help.github.com/articles/virtual-environments-for-github-actions
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        python-version: [3.6, 3.7, 3.8]
        include:
           # Dev versions
           - { python-version: 3.9-dev, os: ubuntu-20.04 }
    steps:
    - uses: actions/checkout@v1
    # From setuptools: https://github.com/pypa/setuptools/pull/2253/files
    - name: Set up Python ${{ matrix.python-version }} (deadsnakes)
      uses: deadsnakes/action@v1.0.0
      if: endsWith(matrix.python-version, '-dev')
      with:
        python-version: ${{ matrix.python-version }}
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1.1.1
      if: "!endsWith(matrix.python-version, '-dev')"
    - name: RC.exe  # https://github.com/actions/virtual-environments/issues/294#issuecomment-588090582
      if: runner.os == 'Windows'
      run: |
        function Invoke-VSDevEnvironment {
        $vswhere = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
            $installationPath = & $vswhere -prerelease -legacy -latest -property installationPath
            $Command = Join-Path $installationPath "Common7\Tools\vsdevcmd.bat"
          & "${env:COMSPEC}" /s /c "`"$Command`" -no_logo && set" | Foreach-Object {
                if ($_ -match '^([^=]+)=(.*)') {
                    [System.Environment]::SetEnvironmentVariable($matches[1], $matches[2])
                }
            }
        }
        Invoke-VSDevEnvironment
        Get-Command rc.exe | Format-Table -AutoSize
    - name: Install dependencies
      run: |
        python -m pip install --upgrade setuptools pip wheel
        python -m pip install tox-gh-actions
    - name: pwd
      run: pwd
    - name: ls
      run: ls
    - name: Test with tox
      run: tox -q -p auto
    - name: Regression
      run: tox -q -p auto -e regression
      if: matrix.python-version == '3.8' && runner.os == 'Linux'
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1.0.10
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        name: pyatv
        fail_ci_if_error: true
